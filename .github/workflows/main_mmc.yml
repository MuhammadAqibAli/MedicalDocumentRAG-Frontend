# Current YML for App Service (first one you posted) - with modifications

name: Build and deploy Node.js app to Azure Web App - mmc

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x' # Using LTS. If 22.x is critical, you can keep it, but LTS is usually more stable.
          cache: 'npm' # Optional: speeds up npm install

      - name: npm install, build, and test
        run: |
          npm install --force # Preferred over npm install --force if package-lock.json is reliable
          # If npm ci fails, fix package-lock.json (npm install locally, commit lock file) then use npm ci
          # Or, if you must: npm install --force
          npm run build --if-present
          npm run test --if-present # Ensure tests pass or this will stop the workflow

      - name: Zip artifact for deployment
        run: |
          # Option 1: Zip everything (including node_modules) - current approach
          # zip release.zip ./* -r -x ".git/*" # Exclude .git
          # Option 2 (Recommended for leaner deployment if Azure installs modules):
          # Zip only necessary production files
          mkdir deployment_package
          cp -R .next deployment_package/
          cp -R public deployment_package/ # If you have a public folder
          cp package.json deployment_package/
          cp package-lock.json deployment_package/ # Important for consistent installs on Azure
          if [ -f next.config.js ]; then cp next.config.js deployment_package/; fi
          # if [ -f .env.production ]; then cp .env.production deployment_package/; fi # Only if it contains NO secrets
          cd deployment_package
          zip -r ../release.zip .
          cd ..

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read # Not strictly needed here if not checking out again

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app # This downloads release.zip

      # REMOVE THIS STEP:
      # - name: Unzip artifact for deployment
      #  run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_766A6DE453C246DDB52F7DDB24B58EA9 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_3D88489CDA6643C5B038115FD8A3AC6D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_45F309ED906F45E191AF1B7E90884158 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'mmc'
          slot-name: 'Production'
          package: release.zip # <--- CHANGE THIS. Deploy the zip directly.
